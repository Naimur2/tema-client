{"version":3,"file":"static/js/981.c9ea63aa.chunk.js","mappings":"6OAiCA,EAnB0B,SAAHA,GAGS,IAF9BC,EAAMD,EAANC,OACAC,EAAYF,EAAZE,aAEA,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CACXC,QAAS,CAACC,EAAAA,EAAeC,EAAAA,IACzBC,YAAY,eACZC,YAAY,UACZC,UAAQ,EACRV,OAAQA,EACRW,SAAUV,KAKlB,E,6BC5BaW,E,QAAmBC,EAASC,gBAAgB,CACvDC,UAAW,SAACC,GAAO,MAAM,CACvBC,6BAA8BD,EAAQE,MAGpC,CACAA,MAAO,SAAAnB,GAAA,IAAGoB,EAAKpB,EAALoB,MAAOC,EAAIrB,EAAJqB,KAAI,MAAQ,CAC3BC,IAAI,6BAADC,OAA+BH,EAAK,UAAAG,OAASF,GAChDG,OAAQ,MACT,IAGHC,gBAAiBR,EAAQE,MAGvB,CACAA,MAAO,SAAAO,GAAA,IAAGC,EAASD,EAATC,UAAWC,EAAOF,EAAPE,QAAO,MAAQ,CAClCN,IAAI,mBAADC,OAAqBI,EAAS,KAAAJ,OAAIK,EAAO,KAC5CJ,OAAQ,MACT,IAEJ,IAG0EK,GAC3EhB,EADaiB,qCACbjB,EADmDkB,wBACnDlB,EAD2EgB,6BCiH7E,EA1HiB,WAYf,IAAAG,GAA8CC,EAAAA,EAAAA,UAG3C,CAAC,GAASC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAYbI,GAfsBF,EAAA,GAAoBA,EAAA,IAedD,EAAAA,EAAAA,UAAuB,KAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA/CnC,EAAMoC,EAAA,GAAEC,EAASD,EAAA,GACxBE,EAA0CV,IAA6BW,GAAAL,EAAAA,EAAAA,GAAAI,EAAA,GAAhEd,EAAee,EAAA,GAgBhBC,GAhB8BC,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAAJ,EAAA,IAAAA,EAAA,KAgBd,eAAAd,GAAAmB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAAhD,GAAA,IAAAiD,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAmB,OAAVR,EAAKjD,EAALiD,MAAOC,EAAGlD,EAAHkD,IAAGK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEVhC,EAAgB,CAC5CE,UAAWsB,EAAMS,cACjB9B,QAASsB,EAAIQ,gBACZC,SAAS,KAAD,EAHLN,EAAeE,EAAAK,KAIrBtB,EAOG,QAPMa,EACQ,OAAfE,QAAe,IAAfA,GAAqB,QAAND,EAAfC,EAAiBQ,YAAI,IAAAT,OAAN,EAAfA,EAAuBU,KACrB,SAAAC,GAAA,IAAGC,EAAaD,EAAbC,cAAeC,EAAWF,EAAXE,YAAiB,MAAoB,CACrDC,MADiCH,EAAJI,KAE7BlB,MAAOmB,IAAMJ,GAAeK,OAAO,cACnCnB,IAAKkB,IAAMH,GAAaI,OAAO,cAChC,WACF,IAAAlB,EAAAA,EAAI,IACLI,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAe,GAAAf,EAAA,kCAAAA,EAAAgB,OAAA,GAAAvB,EAAA,kBAEL,gBAhBqBwB,GAAA,OAAA9C,EAAA+C,MAAA,KAAAC,UAAA,MAoBtB,OAFAC,QAAQC,IAAI,CAAC3E,OAAAA,KAkDXE,EAAAA,EAAAA,KAAA,OAAK0E,UAAU,aAAYzE,UACzBD,EAAAA,EAAAA,KAAC2E,EACC,CACA7E,OAAQA,EACRC,aAAcuC,KAItB,C","sources":["components/ReactFullCalender.tsx","store/apis/calender/index.ts","screens/calender/index.tsx"],"sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport { EventSourceInput, DatesSetArg } from \"@fullcalendar/core\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n// import \"@fullcalendar/core/main.css\";\n// import \"@fullcalendar/daygrid/main.css\";\n// import \"@fullcalendar/timegrid/main.css\";\n// import '@fullcalendar'\n\ninterface IReactFullCalenderProps {\n  events?: EventSourceInput;\n  onDateChange?: (arg: DatesSetArg) => void;\n}\n\nconst ReactFullCalender = ({\n  events,\n  onDateChange,\n}: IReactFullCalenderProps) => {\n  return (\n    <div>\n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        themeSystem=\"Simplex\"\n        weekends\n        events={events}\n        datesSet={onDateChange}\n        // eventContent={renderEventContent}\n      />\n    </div>\n  );\n};\n\nexport default ReactFullCalender;\n","import { ICalenderData, ICalenderDataArgs } from \"types/calender\";\nimport { apiSlice } from \"..\";\n\nexport const calenderApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getCalenderEventsByMonthYear: builder.query<\n      ICalenderData,\n      ICalenderDataArgs\n    >({\n      query: ({ month, year }) => ({\n        url: `/events/range/month?month=${month}&year=${year}`,\n        method: \"GET\",\n      }),\n    }),\n\n    getEventsByDate: builder.query<\n      ICalenderData,\n      { startDate: string; endDate: string }\n    >({\n      query: ({ startDate, endDate }) => ({\n        url: `/events/between/${startDate}/${endDate}}`,\n        method: \"GET\",\n      }),\n    }),\n  }),\n});\n\nexport const { useGetCalenderEventsByMonthYearQuery, useGetEventsByDateQuery,useLazyGetEventsByDateQuery } =\n  calenderApiSlice;\n","import { EventInput, EventSourceInput, DatesSetArg } from \"@fullcalendar/core\";\nimport BigCalender from \"components/BigCalender\";\nimport Loader from \"components/Loader\";\nimport ReactFullCalender from \"components/ReactFullCalender\";\nimport ApiError from \"components/common/ApiError\";\nimport FetchingUi from \"components/common/FetchingUi\";\nimport QueryDataHandler from \"components/common/QueryDataHandler\";\nimport dayjs from \"dayjs\";\nimport { Button } from \"flowbite-react\";\nimport { useMemo, useState } from \"react\";\n// import { Event } from \"react-big-calendar\";\nimport { BiLeftArrowAlt, BiRightArrowAlt } from \"react-icons/bi\";\nimport {\n  useGetCalenderEventsByMonthYearQuery,\n  useGetEventsByDateQuery,\n  useLazyGetEventsByDateQuery,\n} from \"store/apis/calender\";\n\nconst Calender = () => {\n  // const [monthYear, setMonthYear] = useState(dayjs().format(\"MMM YYYY\"));\n  // const { data, ...restRes } = useGetCalenderEventsByMonthYearQuery(\n  //   {\n  //     month: dayjs(monthYear).month() + 1,\n  //     year: dayjs(monthYear).year(),\n  //   },\n  //   {\n  //     refetchOnMountOrArgChange: true,\n  //   }\n  // );\n  /*  */\n  const [setstartEndDate, setSetstartEndDate] = useState<{\n    startDate: string;\n    endDate: string;\n  }>({} as any);\n\n  // const { data, ...restRes } = useGetEventsByDateQuery(\n  //   {\n  //     startDate: setstartEndDate?.startDate ?? \"\",\n  //     endDate: setstartEndDate?.endDate ?? \"\",\n  //   },\n  //   {\n  //     skip: !setstartEndDate?.endDate || !setstartEndDate?.startDate,\n  //     refetchOnMountOrArgChange: true,\n  //   }\n  // );\n  const [events, setEvents] = useState<EventInput[]>([]);\n  const [getEventsByDate, { ...restRes }] = useLazyGetEventsByDateQuery();\n\n  // const myEventsList: EventSourceInput = useMemo(() => {\n  //   return (\n  //     data?.data?.map(\n  //       ({ starting_date, ending_date, name }): EventInput => ({\n  //         title: name,\n  //         start: starting_date,\n  //         end: ending_date,\n  //       })\n  //     ) ?? []\n  //   );\n  // }, [data?.data]);\n\n  // console.log(\"calender events data: \", myEventsList);\n\n  const handleDateChange = async ({ start, end }: DatesSetArg) => {\n    try {\n      const eventsByDateRes = await getEventsByDate({\n        startDate: start.toISOString(),\n        endDate: end.toISOString(),\n      }).unwrap();\n      setEvents(\n        eventsByDateRes?.data?.map(\n          ({ starting_date, ending_date, name }): EventInput => ({\n            title: name,\n            start: dayjs(starting_date).format(\"YYYY-MM-DD\"),\n            end: dayjs(ending_date).format(\"YYYY-MM-DD\"),\n          })\n        ) ?? []\n      );\n    } catch (error) {}\n  };\n\n  console.log({events})\n\n  return (\n    // <div>\n    //   <QueryDataHandler\n    //     {...restRes}\n    //     ui={\n    //       <div className=\"text-white\">\n    // {/* <div className=\"flex justify-center m-4 !mb-8\">\n    //   <div className=\"flex gap-x-4 items-center justify-center\">\n    //     <Button\n    //       type=\"button\"\n    //       className=\"w-full lg:w-auto bg-primary-900 hover:bg-primary-700\"\n    //       onClick={() =>\n    //         setMonthYear((prev) =>\n    //           dayjs(prev).subtract(1, \"month\").format(\"MMM YYYY\")\n    //         )\n    //       }\n    //       disabled={restRes?.isLoading}\n    //     >\n    //       <BiLeftArrowAlt className=\"w-5 h-5\" />\n    //     </Button>\n    //     <p className=\"min-w-[10rem] text-center\">{monthYear}</p>\n    //     <Button\n    //       type=\"button\"\n    //       className=\"w-full lg:w-auto bg-primary-900 hover:bg-primary-700\"\n    //       onClick={() =>\n    //         setMonthYear((prev) =>\n    //           dayjs(prev).add(1, \"month\").format(\"MMM YYYY\")\n    //         )\n    //       }\n    //       disabled={restRes?.isLoading}\n    //     >\n    //       <BiRightArrowAlt className=\"w-5 h-5\" />\n    //     </Button>\n    //   </div>\n    // </div> */}\n    // {/* <BigCalender myEventsList={myEventsList} /> */}\n    // <ReactFullCalender\n    //   // events={myEventsList}\n    //   events={events}\n    //   onDateChange={handleDateChange}\n    // />\n    //       {/* </div>\n    //     }\n    //     loadingUi={<Loader isLoading={restRes?.isLoading} />}\n    //     fetchingUi={<FetchingUi />}\n    //     errorUi={<ApiError />}\n    //   />\n    // </div> */}\n    <div className=\"text-white\">\n      <ReactFullCalender\n        // events={myEventsList}\n        events={events}\n        onDateChange={handleDateChange}\n      />\n    </div>\n  );\n};\n\nexport default Calender;\n"],"names":["_ref","events","onDateChange","_jsx","children","FullCalendar","plugins","dayGridPlugin","interactionPlugin","initialView","themeSystem","weekends","datesSet","calenderApiSlice","apiSlice","injectEndpoints","endpoints","builder","getCalenderEventsByMonthYear","query","month","year","url","concat","method","getEventsByDate","_ref2","startDate","endDate","useLazyGetEventsByDateQuery","useGetCalenderEventsByMonthYearQuery","useGetEventsByDateQuery","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setEvents","_useLazyGetEventsByDa","_useLazyGetEventsByDa2","handleDateChange","Object","assign","_objectDestructuringEmpty","_asyncToGenerator","_regeneratorRuntime","mark","_callee","start","end","_eventsByDateRes$data","_eventsByDateRes$data2","eventsByDateRes","wrap","_context","prev","next","toISOString","unwrap","sent","data","map","_ref3","starting_date","ending_date","title","name","dayjs","format","t0","stop","_x","apply","arguments","console","log","className","ReactFullCalender"],"sourceRoot":""}