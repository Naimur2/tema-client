{"version":3,"file":"static/js/968.27c1a05c.chunk.js","mappings":"kMA4EA,IApDyB,SAAHA,GAII,IAHxBC,EAAeD,EAAfC,gBAAeC,EAAAF,EACfG,SAAAA,OAAQ,IAAAD,GAAAE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KAAcL,EACzBW,EAASb,EAATa,UAKAC,GACEC,EAAAA,EAAAA,IAA0C,CACxCC,cAAe,CACbC,KAAM,IAERd,SAAAA,EACAe,iBAAkBC,EAAAA,GAAW,CAC3BF,KAAME,EAAAA,KAAaC,SAAS,gBAP1BC,EAAaP,EAAbO,cAAeC,EAAYR,EAAZQ,aAAcC,EAAMT,EAANS,OAAQC,EAAOV,EAAPU,QAW7C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACxB1B,IACC2B,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qEAAoEC,SAAC,kBAIrFF,EAAAA,EAAAA,MAAA,QAAMtB,SAAUmB,EAAcI,UAAU,mBAAkBC,SAAA,EACxDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,QAAQ,cAAaH,SAAC,eAC7BC,EAAAA,EAAAA,KAACG,EAAAA,IAASC,EAAAA,EAAAA,GAAA,CACRC,GAAG,cACHC,YAAY,oBACZC,WAAYX,EAAQP,MAAQM,EAAON,MAC/BI,EAAc,cAItBO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,KAAK,SACLX,UAAU,uDAAsDC,SACjE,qBAKHC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACzB,UAAWA,SAI3B,C,2HCoCA,UA7FqB,WACnB,IAAA0B,GAAsCC,EAAAA,EAAAA,MAAyBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxDI,EAAYF,EAAA,GAAI5B,EAAS4B,EAAA,GAAT5B,UAEjB+B,GAAWC,EAAAA,EAAAA,MAEX1C,GAAkC2C,EAAAA,EAAAA,aAAW,eAAA9C,GAAAI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOwC,GAAM,IAAAC,EAAA,OAAA3C,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEvDgC,EAAa,CACjB1B,KAAM8B,EAAO9B,OACZgC,SAAS,KAAD,EACXC,EAAAA,EAAOC,KAAK,CACVC,MAAO,UACPC,KAAM,4BACNC,KAAM,YAERV,GAAU,GAAGnC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA8C,GAAA9C,EAAA,SAEbyC,EAAAA,EAAOC,KAAK,CACVC,MAAO,QACPC,MAAM,OAAA5C,EAAA8C,SAAA,IAAA9C,EAAA8C,IAAW,QAAXP,EAAAvC,EAAA8C,GAAOC,YAAI,IAAAR,OAAX,EAAAA,EAAaS,UAAW,uBAC9BH,KAAM,UACL,yBAAA7C,EAAAG,OAAA,GAAAL,EAAA,kBAEN,gBAAAmD,GAAA,OAAA1D,EAAA2D,MAAA,KAAAC,UAAA,EAlBkD,GAkBhD,IAgCH,OA8BEhC,EAAAA,EAAAA,KAACiC,EAAAA,EAAgB,CACfhD,UAAWA,EACXZ,iBAAe,EACfE,SAAUA,GAGhB,C,0NClGa2D,EAAiBC,EAAAA,EAASC,gBAAgB,CACnDC,UAAW,SAACC,GAAO,MAAM,CACrBvB,aAAcuB,EAAQC,SAA6C,CAC/DC,MAAO,SAACC,GAAI,MAAM,CACdC,IAAK,WACLC,OAAQ,OACRF,KAAAA,EACH,EACDG,gBAAiB,CAAC,aAGtBC,gBAAiBP,EAAQC,SAAS,CAC9BC,MAAO,SAACC,GAAI,MAAM,CACdC,IAAI,WACJC,OAAQ,OACRF,KAAAA,EACH,EACDG,gBAAiB,CAAC,aAEtBE,WAAYR,EAAQE,MAA0B,CAC1CA,MAAO,iBAAO,CACVE,IAAK,yBACLC,OAAQ,MACX,EACDI,aAAc,CAAC,aAEnBC,cAAeV,EAAQE,MAGrB,CACEA,MAAO,SAACnC,GAAE,MAAM,CACZqC,IAAI,YAADO,OAAc5C,GACjBsC,OAAQ,MACX,EACDI,aAAc,CAAC,aAEnBG,aAAcZ,EAAQC,SAAS,CAC3BC,MAAO,SAAApE,GAAA,IAAGiC,EAAEjC,EAAFiC,GAAOoC,GAAIU,EAAAA,EAAAA,GAAA/E,EAAAgF,GAAA,MAAQ,CACzBV,IAAI,YAADO,OAAc5C,GACjBsC,OAAQ,MACRF,KAAAA,EACH,EACDG,gBAAiB,CAAC,aAEtBS,WAAYf,EAAQC,SAAS,CACzBC,MAAO,SAAAc,GAAA,IAAGjD,EAAEiD,EAAFjD,GAAOoC,GAAIU,EAAAA,EAAAA,GAAAG,EAAAC,GAAA,MAAQ,CACzBb,IAAI,kBAADO,OAAoB5C,GACvBsC,OAAQ,OACRF,KAAAA,EACH,EACDG,gBAAiB,CAAC,aAEtBY,YAAalB,EAAQC,SAA+B,CAChDC,MAAO,SAAAiB,GAAmB,MAAQ,CAC9Bf,IAAI,wBACJD,KAAM,CAAEiB,SAFMD,EAARC,SAEYC,OAFIF,EAANE,QAGhBhB,OAAQ,OACX,EACDC,gBAAiB,CAAC,aAEtBgB,aAActB,EAAQC,SAAS,CAC3BC,MAAO,SAACnC,GAAE,MAAM,CACZqC,IAAI,YAADO,OAAc5C,GACjBsC,OAAQ,SACX,EACDC,gBAAiB,CAAC,aAEzB,IAIDhC,EAQAsB,EARAtB,wBACAiD,EAOA3B,EAPA2B,mBACAC,EAMA5B,EANA4B,sBAGAC,GAGA7B,EALA8B,wBAKA9B,EAJA+B,wBAIA/B,EAHA6B,uBACAG,EAEAhC,EAFAgC,2BACAC,EACAjC,EADAiC,sB","sources":["components/folder/CreateFolderForm.tsx","screens/folder/create-folder.tsx","store/apis/folder/index.ts"],"sourcesContent":["import { FormikHelpers, useFormik } from \"formik\";\nimport { Button, Label, TextInput } from \"flowbite-react\";\nimport Loader from \"components/Loader\";\nimport * as Yup from \"yup\";\n// import { useNavigate } from \"react-router\";\n// import MySwal from \"components/MySwal\";\n// import { useCreateFolderMutation } from \"store/apis/folder\";\n\ninterface ICreateFolderFormInitialValues {\n  name: string;\n}\n\nexport type TCreateFolderOnSubmit = (\n  values: ICreateFolderFormInitialValues,\n  formikHelpers: FormikHelpers<ICreateFolderFormInitialValues>\n) => void | Promise<any>;\n\ninterface ICreateFolderForm {\n  // setOpenModal?: React.Dispatch<React.SetStateAction<\"default\" | undefined>>;\n  isShowFormTitle?: boolean;\n  onSubmit?: TCreateFolderOnSubmit;\n  isLoading?: boolean;\n}\n\nconst CreateFolderForm = ({\n  isShowFormTitle,\n  onSubmit = async () => {},\n  isLoading,\n}: ICreateFolderForm) => {\n  // const [CreateFolder, { isLoading }] = useCreateFolderMutation();\n  // const navigate = useNavigate();\n\n  const { getFieldProps, handleSubmit, errors, touched } =\n    useFormik<ICreateFolderFormInitialValues>({\n      initialValues: {\n        name: \"\",\n      },\n      onSubmit,\n      validationSchema: Yup.object({\n        name: Yup.string().required(\"Required\"),\n      }),\n    });\n\n  return (\n    <div className=\"grid gap-4\">\n      {isShowFormTitle && (\n        <h2 className=\"text-2xl font-semibold leading-tight text-gray-800 dark:text-white\">\n          Create event\n        </h2>\n      )}\n      <form onSubmit={handleSubmit} className=\"mt-10 grid gap-4\">\n        <div className=\"mb-4 flex flex-col gap-4\">\n          <Label htmlFor=\"folder_name\">File Name</Label>\n          <TextInput\n            id=\"folder_name\"\n            placeholder=\"Enter folder name\"\n            helperText={touched.name && errors.name}\n            {...getFieldProps(\"name\")}\n          />\n        </div>\n\n        <div className=\"mb-6 mt-20\">\n          <Button\n            type=\"submit\"\n            className=\"w-full lg:w-auto bg-primary-900 hover:bg-primary-700\"\n          >\n            Create Folder\n          </Button>\n        </div>\n\n        <Loader isLoading={isLoading as boolean} />\n      </form>\n    </div>\n  );\n};\n\nexport default CreateFolderForm;\n","import { useCallback } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport MySwal from \"components/MySwal\";\nimport { useCreateFolderMutation } from \"store/apis/folder\";\nimport CreateFolderForm, {\n  TCreateFolderOnSubmit,\n} from \"components/folder/CreateFolderForm\";\n\n// interface ICreateFolderInitialValues {\n//   name: string;\n// }\n\n// interface ICreateFolder {\n//   setOpenModal?: React.Dispatch<React.SetStateAction<\"default\" | undefined>>;\n//   isShowFormTitle?: boolean;\n// }\n\nconst CreateFolder = () => {\n  const [createFolder, { isLoading }] = useCreateFolderMutation();\n\n  const navigate = useNavigate();\n\n  const onSubmit: TCreateFolderOnSubmit = useCallback(async (values) => {\n    try {\n      await createFolder({\n        name: values.name,\n      }).unwrap();\n      MySwal.fire({\n        title: \"Success\",\n        text: \"Folder added successfully\",\n        icon: \"success\",\n      });\n      navigate(-1);\n    } catch (error: any) {\n      MySwal.fire({\n        title: \"Error\",\n        text: error?.data?.message || \"Something went wrong\",\n        icon: \"error\",\n      });\n    }\n  }, []);\n\n  // const { getFieldProps, handleSubmit, errors, touched } =\n  //   useFormik<ICreateFolderInitialValues>({\n  //     initialValues: {\n  //       name: \"\",\n  //     },\n  //     onSubmit: async (values) => {\n  //       try {\n  //         await createFolder({\n  //           name: values.name,\n  //         }).unwrap();\n  //         MySwal.fire({\n  //           title: \"Success\",\n  //           text: \"Folder added successfully\",\n  //           icon: \"success\",\n  //         });\n  //         setOpenModal?.(undefined);\n  //         navigate(-1);\n  //       } catch (error: any) {\n  //         MySwal.fire({\n  //           title: \"Error\",\n  //           text: error?.data?.message || \"Something went wrong\",\n  //           icon: \"error\",\n  //         });\n  //       }\n  //     },\n  //     validationSchema: Yup.object({\n  //       name: Yup.string().required(\"Required\"),\n  //     }),\n  //   });\n\n  return (\n    // <div className=\"grid gap-4\">\n    //   {isShowFormTitle && (\n    //     <h2 className=\"text-2xl font-semibold leading-tight text-gray-800 dark:text-white\">\n    //       Create event\n    //     </h2>\n    //   )}\n    //   <form onSubmit={handleSubmit} className=\"mt-10 grid gap-4\">\n    //     <div className=\"mb-4 flex flex-col gap-4\">\n    //       <Label htmlFor=\"folder_name\">File Name</Label>\n    //       <TextInput\n    //         id=\"folder_name\"\n    //         placeholder=\"Enter folder name\"\n    //         helperText={touched.name && errors.name}\n    //         {...getFieldProps(\"name\")}\n    //       />\n    //     </div>\n\n    //     <div className=\"mb-6 mt-20\">\n    //       <Button\n    //         type=\"submit\"\n    //         className=\"w-full lg:w-auto bg-primary-900 hover:bg-primary-700\"\n    //       >\n    //         Create Folder\n    //       </Button>\n    //     </div>\n\n    //     <Loader isLoading={isLoading} />\n    //   </form>\n    // </div>\n    <CreateFolderForm\n      isLoading={isLoading}\n      isShowFormTitle\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nexport default CreateFolder;\n","import {\n    ICreateFolderArg,\n    ICreateFolderRes,\n    IFileDeleteArgs,\n    IFoldersData,\n    IViewFolderORFileData,\n    TViewFolderORFileDataArg,\n} from \"types/folder\";\nimport { apiSlice } from \"..\";\n\nexport const folderApiSlice = apiSlice.injectEndpoints({\n    endpoints: (builder) => ({\n        createFolder: builder.mutation<ICreateFolderRes, ICreateFolderArg>({\n            query: (body) => ({\n                url: \"/folders\",\n                method: \"POST\",\n                body,\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n        // new\n        createNewFolder: builder.mutation({\n            query: (body) => ({\n                url: `/folders`,\n                method: \"POST\",\n                body,\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n        getFolders: builder.query<IFoldersData, void>({\n            query: () => ({\n                url: \"/folders?noParent=true\",\n                method: \"GET\",\n            }),\n            providesTags: [\"folders\"],\n        }),\n        getFolderById: builder.query<\n            IViewFolderORFileData,\n            TViewFolderORFileDataArg\n        >({\n            query: (id) => ({\n                url: `/folders/${id}`,\n                method: \"GET\",\n            }),\n            providesTags: [\"folders\"],\n        }),\n        updateFolder: builder.mutation({\n            query: ({ id, ...body }) => ({\n                url: `/folders/${id}`,\n                method: \"PUT\",\n                body,\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n        uploadFile: builder.mutation({\n            query: ({ id, ...body }) => ({\n                url: `/folders/files/${id}`,\n                method: \"POST\",\n                body,\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n        deleteAFile: builder.mutation<any, IFileDeleteArgs>({\n            query: ({ folderId, fileId }) => ({\n                url: `/folders/delete-files`,\n                body: { folderId, fileId },\n                method: \"POST\",\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n        deleteFolder: builder.mutation({\n            query: (id) => ({\n                url: `/folders/${id}`,\n                method: \"DELETE\",\n            }),\n            invalidatesTags: [\"folders\"],\n        }),\n    }),\n});\n\nexport const {\n    useCreateFolderMutation,\n    useGetFoldersQuery,\n    useGetFolderByIdQuery,\n    useUpdateFolderMutation,\n    useDeleteFolderMutation,\n    useUploadFileMutation,\n    useCreateNewFolderMutation,\n    useDeleteAFileMutation,\n} = folderApiSlice;\n"],"names":["_ref","isShowFormTitle","_ref$onSubmit","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","isLoading","_useFormik","useFormik","initialValues","name","validationSchema","Yup","required","getFieldProps","handleSubmit","errors","touched","_jsxs","className","children","_jsx","Label","htmlFor","TextInput","_objectSpread","id","placeholder","helperText","Button","type","Loader","_useCreateFolderMutat","useCreateFolderMutation","_useCreateFolderMutat2","_slicedToArray","createFolder","navigate","useNavigate","useCallback","values","_error$data","unwrap","MySwal","fire","title","text","icon","t0","data","message","_x","apply","arguments","CreateFolderForm","folderApiSlice","apiSlice","injectEndpoints","endpoints","builder","mutation","query","body","url","method","invalidatesTags","createNewFolder","getFolders","providesTags","getFolderById","concat","updateFolder","_objectWithoutProperties","_excluded","uploadFile","_ref2","_excluded2","deleteAFile","_ref3","folderId","fileId","deleteFolder","useGetFoldersQuery","useGetFolderByIdQuery","useUploadFileMutation","useUpdateFolderMutation","useDeleteFolderMutation","useCreateNewFolderMutation","useDeleteAFileMutation"],"sourceRoot":""}