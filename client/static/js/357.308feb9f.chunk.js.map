{"version":3,"file":"static/js/357.308feb9f.chunk.js","mappings":"oQAqBeA,E,QAfqBC,EAASC,gBAAgB,CAC3DC,UAAW,SAACC,GAAO,MAAM,CACvBC,mBAAoBD,EAAQE,SAG1B,CACAC,MAAO,SAACC,GAAI,MAAM,CAChBC,IAAK,cACLC,OAAQ,OACRF,KAAAA,EACD,IAEJ,IAGYR,8B,SCXA,SAASW,IACtB,IAAAC,EAA4CZ,IAA+Ba,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAApEP,EAAkBQ,EAAA,GAAIE,EAASF,EAAA,GAATE,UAG7BC,IADiBC,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,IAAsC,CACpCC,cAAe,CACbC,MAAO,GACPZ,KAAM,IAERa,SAAS,WAAD,IAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAOC,GAAM,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAOb3B,EAAmBsB,GAAQM,SAAS,KAAD,EACzCC,EAAAA,EAAOC,KAAK,CACVf,MAAO,UACPgB,KAAM,oCACNC,KAAM,YAERP,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEAI,EAAAA,EAAOC,KAAK,CACVf,MAAO,QACPgB,MAAM,OAAAN,EAAAQ,SAAA,IAAAR,EAAAQ,IAAW,QAAXV,EAAAE,EAAAQ,GAAOC,YAAI,IAAAX,OAAX,EAAAA,EAAaY,UAAW,uBAC9BH,KAAM,UACL,wBAAAP,EAAAW,OAAA,GAAAf,EAAA,kBAEN,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,EArBQ,GAsBTC,iBAAkBC,EAAAA,GAAW,CAC3B1B,MAAO0B,EAAAA,KAAaC,SAAS,YAC7BvC,KAAMsC,EAAAA,KAAaC,SAAS,iBA9B1BC,EAAahC,EAAbgC,cAAeC,EAAYjC,EAAZiC,aAAcC,EAAMlC,EAANkC,OAAQC,EAAOnC,EAAPmC,QAkC7C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qEAAoEC,SAAC,yBAGnFF,EAAAA,EAAAA,MAAA,QAAM/B,SAAU4B,EAAcI,UAAU,QAAOC,SAAA,EAC7CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,QAAQ,QAAOH,SAAC,WACvBC,EAAAA,EAAAA,KAACG,EAAAA,IAASC,EAAAA,EAAAA,GAAA,CACRC,GAAG,QACHC,YAAY,cACZC,WAAYX,EAAQ/B,OAAS8B,EAAO9B,OAChC4B,EAAc,eAGtBI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,QAAQ,UAASH,SAAC,aACzBC,EAAAA,EAAAA,KAACG,EAAAA,IAASC,EAAAA,EAAAA,GAAA,CACRC,GAAG,UACHC,YAAY,gBACZC,WAAYX,EAAQ3C,MAAQ0C,EAAO1C,MAC/BwC,EAAc,cAItBO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,KAAK,SACLX,UAAU,uDAAsDC,SACjE,yBAIHC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAAClD,UAAWA,SAI3B,C","sources":["store/apis/notification/index.ts","screens/notifications/index.tsx"],"sourcesContent":["import {\n  ICreateNotificationRes,\n  TCreateNotificationArgs,\n} from \"types/notification\";\nimport { apiSlice } from \"..\";\n\nexport const notificationApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    createNotification: builder.mutation<\n      ICreateNotificationRes,\n      TCreateNotificationArgs\n    >({\n      query: (body) => ({\n        url: \"/fcm/notify\",\n        method: \"POST\",\n        body,\n      }),\n    }),\n  }),\n});\n\nexport const { useCreateNotificationMutation } = notificationApiSlice;\n","import { useFormik } from \"formik\";\r\nimport { Button, Label, TextInput } from \"flowbite-react\";\r\nimport Loader from \"components/Loader\";\r\nimport { useCreateTeamMutation } from \"store/apis/team\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router\";\r\nimport MySwal from \"components/MySwal\";\r\nimport { useCreateNotificationMutation } from \"store/apis/notification\";\r\nimport { INotificationInitialValues } from \"types/notification\";\r\n\r\nexport default function Notification() {\r\n  const [createNotification, { isLoading }] = useCreateNotificationMutation();\r\n\r\n  const navigate = useNavigate();\r\n  const { getFieldProps, handleSubmit, errors, touched } =\r\n    useFormik<INotificationInitialValues>({\r\n      initialValues: {\r\n        title: \"\",\r\n        body: \"\",\r\n      },\r\n      onSubmit: async (values) => {\r\n        try {\r\n          // const submittedValue = {\r\n          //   title: values.title,\r\n          //   body: values.message,\r\n          // };\r\n\r\n          await createNotification(values).unwrap();\r\n          MySwal.fire({\r\n            title: \"Success\",\r\n            text: \"Notification created successfully\",\r\n            icon: \"success\",\r\n          });\r\n          // navigate(-1);\r\n        } catch (error: any) {\r\n          MySwal.fire({\r\n            title: \"Error\",\r\n            text: error?.data?.message || \"Something went wrong\",\r\n            icon: \"error\",\r\n          });\r\n        }\r\n      },\r\n      validationSchema: Yup.object({\r\n        title: Yup.string().required(\"Required\"),\r\n        body: Yup.string().required(\"Required\"),\r\n      }),\r\n    });\r\n\r\n  return (\r\n    <div className=\"grid gap-4\">\r\n      <h2 className=\"text-2xl font-semibold leading-tight text-gray-800 dark:text-white\">\r\n        Create Notification\r\n      </h2>\r\n      <form onSubmit={handleSubmit} className=\"mt-10\">\r\n        <div className=\"mb-4 flex flex-col gap-4\">\r\n          <Label htmlFor=\"title\">Title</Label>\r\n          <TextInput\r\n            id=\"title\"\r\n            placeholder=\"Enter title\"\r\n            helperText={touched.title && errors.title}\r\n            {...getFieldProps(\"title\")}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4 flex flex-col gap-4\">\r\n          <Label htmlFor=\"message\">Message</Label>\r\n          <TextInput\r\n            id=\"message\"\r\n            placeholder=\"Enter message\"\r\n            helperText={touched.body && errors.body}\r\n            {...getFieldProps(\"body\")}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-6 mt-10\">\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full lg:w-auto bg-primary-900 hover:bg-primary-700\"\r\n          >\r\n            Send Notification\r\n          </Button>\r\n        </div>\r\n        <Loader isLoading={isLoading} />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["useCreateNotificationMutation","apiSlice","injectEndpoints","endpoints","builder","createNotification","mutation","query","body","url","method","Notification","_useCreateNotificatio","_useCreateNotificatio2","_slicedToArray","isLoading","_useFormik","useNavigate","useFormik","initialValues","title","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_error$data","wrap","_context","prev","next","unwrap","MySwal","fire","text","icon","t0","data","message","stop","_x","apply","arguments","validationSchema","Yup","required","getFieldProps","handleSubmit","errors","touched","_jsxs","className","children","_jsx","Label","htmlFor","TextInput","_objectSpread","id","placeholder","helperText","Button","type","Loader"],"sourceRoot":""}